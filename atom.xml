<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://nooballen.top/atom.xml" rel="self"/>
  
  <link href="http://nooballen.top/"/>
  <updated>2020-11-25T08:43:09.552Z</updated>
  <id>http://nooballen.top/</id>
  
  <author>
    <name>Allen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://nooballen.top/2020/11/25/Python/"/>
    <id>http://nooballen.top/2020/11/25/Python/</id>
    <published>2020-11-25T08:42:24.441Z</published>
    <updated>2020-11-25T08:43:09.552Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h1 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h1><hr><h2 id="1-程序的控制结构"><a href="#1-程序的控制结构" class="headerlink" title="1.程序的控制结构"></a>1.程序的控制结构</h2><h3 id="1-1-程序的分支结构"><a href="#1-1-程序的分支结构" class="headerlink" title="1.1 程序的分支结构"></a>1.1 程序的分支结构</h3><h4 id="1-1-1-二分支结构"><a href="#1-1-1-二分支结构" class="headerlink" title="1.1.1 二分支结构"></a>1.1.1 二分支结构</h4><p>紧凑形式：&lt;*表达式1*&gt; if &lt;*条件*&gt; else &lt;*表达式2*&gt;</p><p>For example: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guess=eval(input())</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;猜&#123;&#125;了&quot;</span>.format(<span class="string">&quot;对&quot;</span> <span class="keyword">if</span> guess==<span class="number">99</span> <span class="keyword">else</span> <span class="string">&quot;错&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-1-2-程序的异常处理"><a href="#1-1-2-程序的异常处理" class="headerlink" title="1.1.2 程序的异常处理"></a>1.1.2 程序的异常处理</h4><h5 id="First-method"><a href="#First-method" class="headerlink" title="First method"></a>First method</h5><p>try :</p><p>​    &lt;语句块1&gt;*</p><p>except :</p><p>​    &lt;语句块2&gt;*</p><p>For example :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    num = eval(input(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    print(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    print(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="Second-method"><a href="#Second-method" class="headerlink" title="Second method"></a>Second method</h5><p>try:</p><p>​    &lt;语句块1&gt;*</p><p>except <em>&lt;异常类型&gt;</em> :</p><p>​    &lt;语句块2&gt;*</p><p>For example :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> :</span><br><span class="line">    num = eval(input(<span class="string">&quot;请输入一个整数：&quot;</span>))</span><br><span class="line">    print(num**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> NameError :</span><br><span class="line">    print(<span class="string">&quot;输入不是整数&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="高级方法"><a href="#高级方法" class="headerlink" title="高级方法"></a>高级方法</h5><p>try :</p><p>​    <em>&lt;语句块1&gt;</em></p><p>except :</p><p>​    <em>&lt;语句块2&gt;</em></p><p>else :</p><p>​    <em>&lt;语句块3&gt;</em>       #不发生异常时执行</p><p>finally :</p><p>​    <em>&lt;语句块4&gt;</em>       #finally 一定执行</p><h2 id="2-程序的循环结构"><a href="#2-程序的循环结构" class="headerlink" title="2.程序的循环结构"></a>2.程序的循环结构</h2><h3 id="2-1-计数循环"><a href="#2-1-计数循环" class="headerlink" title="2.1 计数循环"></a>2.1 计数循环</h3><p>特定步长 ：</p><p>for i in range(M,N,K) :        # 从M到N-1，K为步长</p><p>​    &lt;语句块&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>) :</span><br><span class="line">    print(<span class="string">&quot;Hello:&quot;</span>,i)</span><br></pre></td></tr></table></figure><h3 id="2-2-高级循环"><a href="#2-2-高级循环" class="headerlink" title="2.2 高级循环"></a>2.2 高级循环</h3><p>添加else用法，与异常处理作用相似,正常循环下会执行else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;<span class="string">&quot;循环变量&quot;</span>&gt; <span class="keyword">in</span> &lt;<span class="string">&quot;遍历结构&quot;</span>&gt; :</span><br><span class="line">    &lt;<span class="string">&quot;语句块1&quot;</span>&gt;</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    &lt;<span class="string">&quot;语句块2&quot;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;<span class="string">&quot;条件&quot;</span>&gt; :</span><br><span class="line">    &lt;<span class="string">&quot;语句块1&quot;</span>&gt;</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    &lt;<span class="string">&quot;语句块2&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="3-函数和代码"><a href="#3-函数和代码" class="headerlink" title="3.函数和代码"></a>3.函数和代码</h2><h3 id="3-1-函数的定义和使用"><a href="#3-1-函数的定义和使用" class="headerlink" title="3.1 函数的定义和使用"></a>3.1 函数的定义和使用</h3><h4 id="包括可选参数的定义："><a href="#包括可选参数的定义：" class="headerlink" title="包括可选参数的定义："></a>包括可选参数的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt; (<span class="params"> &lt;非可选参数&gt; , &lt;可选参数&gt; </span>) :</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure><h4 id="包括可变参数的定义："><a href="#包括可变参数的定义：" class="headerlink" title="包括可变参数的定义："></a>包括可变参数的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt; (<span class="params"> &lt;参数&gt; , *b </span>) :</span></span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>函数可以返回0个或多个返回值（用 <strong>,</strong> 隔开）</p><p>返回多个返回值，则返回值类型为<strong>元组</strong>类型</p><p>或者用赋值符号将多个返回值赋给多个变量</p><p><img src="/2020/11/25/Python/image-20201124181054226.png" alt="image-20201124181054226"></p><h4 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h4><p>它是一种匿名函数，通常长度为一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;函数名&gt; = <span class="keyword">lambda</span> &lt;参数&gt; : &lt;表达式&gt;</span><br></pre></td></tr></table></figure><h2 id="附录一：库的使用"><a href="#附录一：库的使用" class="headerlink" title="附录一：库的使用"></a>附录一：库的使用</h2><h3 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h3><p>主要用于产生（伪）随机数，采用梅森螺旋算法。</p><h4 id="基本随机数函数"><a href="#基本随机数函数" class="headerlink" title="基本随机数函数"></a>基本随机数函数</h4><p>随机数种子确定了随机序列的产生（可以复现程序过程）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.seed()      <span class="comment">#初始化随机数种子，默认为系统时间</span></span><br><span class="line">random.random()    <span class="comment">#随机产生一个[0.0,1.0)之间的小数</span></span><br></pre></td></tr></table></figure><h4 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">random.randint(a,b)          <span class="comment">#随机生成一个[a,b]之间的整数</span></span><br><span class="line">random.randrange(M,N[,K])    <span class="comment">#随机生成一个[M,N)之间以K为步长的整数</span></span><br><span class="line">random.getrandbits(k)        <span class="comment">#随机生成一个k比特长的整数</span></span><br><span class="line">random.uniform(a,b)          <span class="comment">#随机生成一个[a,b]之间的小数</span></span><br><span class="line">random.choice(seq)           <span class="comment">#从序列seq中随机选择一个元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">random.choice([1,2,3,4,5,6,7,8,9]) </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">random.shuffle(seq)          <span class="comment">#将序列seq中元素随机排列，返回打乱后的序列</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=[1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="string">random.shuffle(s)</span></span><br><span class="line"><span class="string">print(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;h1 id=&quot;Python-1&quot;&gt;&lt;a href=&quot;#Python-1&quot; class=&quot;headerl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Allen学数据结构与算法基础</title>
    <link href="http://nooballen.top/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://nooballen.top/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-11-07T03:00:58.672Z</published>
    <updated>2020-11-07T03:04:59.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念及术语"><a href="#基本概念及术语" class="headerlink" title="基本概念及术语"></a>基本概念及术语</h2><hr><p>数据 &gt; 数据元素 &gt; 数据项</p><p><img src="/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201105233617409.png" alt="image-20201105233617409"></p><p>逻辑结构可分为</p><p>1.线性结构</p><p>2.非线性结构</p><p><img src="/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20201105234337718.png" alt="image-20201105234337718"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本概念及术语&quot;&gt;&lt;a href=&quot;#基本概念及术语&quot; class=&quot;headerlink&quot; title=&quot;基本概念及术语&quot;&gt;&lt;/a&gt;基本概念及术语&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;数据 &amp;gt; 数据元素 &amp;gt; 数据项&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/</summary>
      
    
    
    
    
    <category term="CS" scheme="http://nooballen.top/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>string用法</title>
    <link href="http://nooballen.top/2020/11/05/C++%E4%B8%AD%E5%85%B3%E4%BA%8Estring%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://nooballen.top/2020/11/05/C++%E4%B8%AD%E5%85%B3%E4%BA%8Estring%E7%9A%84%E7%94%A8%E6%B3%95/</id>
    <published>2020-11-05T15:55:05.762Z</published>
    <updated>2020-11-16T13:27:45.212Z</updated>
    
    <content type="html"><![CDATA[<p>string str;</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>str.find(); 如果没有找到，会返回一个值string::npos</p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>1.对string进行排序</p><p>sort(str.begin(),str.end());</p><p>2.向string中插入字符</p><p>str.insert(  n1,  s  , n2,  len   )  </p><p>从str[n1]起 插入从s[n2]起的len个字符</p><p>3.覆盖一部分字符串</p><p>str.replace(被覆盖的下标，覆盖几个，覆盖来源的字符串，覆盖来源的字符串下标，选取几个)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;string str;&lt;/p&gt;
&lt;h4 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h4&gt;&lt;p&gt;str.find(); 如果没有找到，会返回一个值string::npos&lt;/p&gt;
&lt;h4 id=&quot;修</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>辗转相除法</title>
    <link href="http://nooballen.top/2020/11/05/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/"/>
    <id>http://nooballen.top/2020/11/05/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/</id>
    <published>2020-11-05T15:55:05.759Z</published>
    <updated>2020-11-07T02:53:10.803Z</updated>
    
    <content type="html"><![CDATA[<p>求两个数的最大公约数的常用方法为辗转相除法，通常用于分数约分</p><p>以除数和余数反复做除法运算</p><p>int GCD(int a,int b)  //求最大公约数<br>{<br>   int num1=max(a,b),num2=min(a,b);<br>   int temp=num1%num2; //记录余数</p><p>   while(temp!=0)<br>   {<br>        num1=num2;<br>        num2=temp;<br>        temp=num1%num2;<br>    } cout&lt;&lt;num2&lt;&lt;” “;<br>    return num2;<br>}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;求两个数的最大公约数的常用方法为辗转相除法，通常用于分数约分&lt;/p&gt;
&lt;p&gt;以除数和余数反复做除法运算&lt;/p&gt;
&lt;p&gt;int GCD(int a,int b)  //求最大公约数&lt;br&gt;{&lt;br&gt;   int num1=max(a,b),num2=min(a,b);&lt;br&gt;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://nooballen.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题解</title>
    <link href="http://nooballen.top/2020/09/20/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3/"/>
    <id>http://nooballen.top/2020/09/20/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3/</id>
    <published>2020-09-20T13:30:55.775Z</published>
    <updated>2020-11-07T02:53:35.961Z</updated>
    
    <content type="html"><![CDATA[<p>Hello</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
