{"meta":{"title":"","subtitle":"","description":"","author":"Allen","url":"http://nooballen.top","root":"/"},"pages":[{"title":"categories","date":"2020-11-05T16:05:43.000Z","updated":"2020-11-05T16:05:43.907Z","comments":true,"path":"categories/index.html","permalink":"http://nooballen.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-11-05T16:05:58.000Z","updated":"2020-11-05T16:05:58.451Z","comments":true,"path":"tags/index.html","permalink":"http://nooballen.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"Python","date":"2020-11-25T08:42:24.441Z","updated":"2020-11-25T08:43:09.552Z","comments":true,"path":"2020/11/25/Python/","link":"","permalink":"http://nooballen.top/2020/11/25/Python/","excerpt":"","text":"PythonPython 1.程序的控制结构1.1 程序的分支结构1.1.1 二分支结构紧凑形式：&lt;*表达式1*&gt; if &lt;*条件*&gt; else &lt;*表达式2*&gt; For example: 12345guess=eval(input())print(&quot;猜&#123;&#125;了&quot;.format(&quot;对&quot; if guess==99 else &quot;错&quot;)) 1.1.2 程序的异常处理First methodtry : ​ &lt;语句块1&gt;* except : ​ &lt;语句块2&gt;* For example : 12345try : num = eval(input(&quot;请输入一个整数：&quot;)) print(num**2)except : print(&quot;输入不是整数&quot;) Second methodtry: ​ &lt;语句块1&gt;* except &lt;异常类型&gt; : ​ &lt;语句块2&gt;* For example : 12345try : num = eval(input(&quot;请输入一个整数：&quot;)) print(num**2)except NameError : print(&quot;输入不是整数&quot;) 高级方法try : ​ &lt;语句块1&gt; except : ​ &lt;语句块2&gt; else : ​ &lt;语句块3&gt; #不发生异常时执行 finally : ​ &lt;语句块4&gt; #finally 一定执行 2.程序的循环结构2.1 计数循环特定步长 ： for i in range(M,N,K) : # 从M到N-1，K为步长 ​ &lt;语句块&gt; 12for i in range(1,6,2) : print(&quot;Hello:&quot;,i) 2.2 高级循环添加else用法，与异常处理作用相似,正常循环下会执行else 1234for &lt;&quot;循环变量&quot;&gt; in &lt;&quot;遍历结构&quot;&gt; : &lt;&quot;语句块1&quot;&gt;else : &lt;&quot;语句块2&quot;&gt; 1234while &lt;&quot;条件&quot;&gt; : &lt;&quot;语句块1&quot;&gt;else : &lt;&quot;语句块2&quot;&gt; 3.函数和代码3.1 函数的定义和使用包括可选参数的定义：123def &lt;函数名&gt; ( &lt;非可选参数&gt; , &lt;可选参数&gt; ) : &lt;函数体&gt; return &lt;返回值&gt; 包括可变参数的定义：123def &lt;函数名&gt; ( &lt;参数&gt; , *b ) : &lt;函数体&gt; return &lt;返回值&gt; 返回值函数可以返回0个或多个返回值（用 , 隔开） 返回多个返回值，则返回值类型为元组类型 或者用赋值符号将多个返回值赋给多个变量 lambda函数它是一种匿名函数，通常长度为一行 1&lt;函数名&gt; = lambda &lt;参数&gt; : &lt;表达式&gt; 附录一：库的使用random库主要用于产生（伪）随机数，采用梅森螺旋算法。 基本随机数函数随机数种子确定了随机序列的产生（可以复现程序过程） 12random.seed() #初始化随机数种子，默认为系统时间random.random() #随机产生一个[0.0,1.0)之间的小数 扩展随机数函数1234567891011121314random.randint(a,b) #随机生成一个[a,b]之间的整数random.randrange(M,N[,K]) #随机生成一个[M,N)之间以K为步长的整数random.getrandbits(k) #随机生成一个k比特长的整数random.uniform(a,b) #随机生成一个[a,b]之间的小数random.choice(seq) #从序列seq中随机选择一个元素&#x27;&#x27;&#x27;random.choice([1,2,3,4,5,6,7,8,9]) &#x27;&#x27;&#x27;random.shuffle(seq) #将序列seq中元素随机排列，返回打乱后的序列&#x27;&#x27;&#x27;s=[1,2,3,4,5,6,7,8,9]random.shuffle(s)print(s)&#x27;&#x27;&#x27;","categories":[],"tags":[]},{"title":"Allen学数据结构与算法基础","slug":"数据结构","date":"2020-11-07T03:00:58.672Z","updated":"2020-11-07T03:04:59.593Z","comments":true,"path":"2020/11/07/数据结构/","link":"","permalink":"http://nooballen.top/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"基本概念及术语 数据 &gt; 数据元素 &gt; 数据项 逻辑结构可分为 1.线性结构 2.非线性结构","categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://nooballen.top/tags/CS/"}]},{"title":"string用法","slug":"C++中关于string的用法","date":"2020-11-05T15:55:05.762Z","updated":"2020-11-16T13:27:45.212Z","comments":true,"path":"2020/11/05/C++中关于string的用法/","link":"","permalink":"http://nooballen.top/2020/11/05/C++%E4%B8%AD%E5%85%B3%E4%BA%8Estring%E7%9A%84%E7%94%A8%E6%B3%95/","excerpt":"","text":"string str; 查找str.find(); 如果没有找到，会返回一个值string::npos 修改1.对string进行排序 sort(str.begin(),str.end()); 2.向string中插入字符 str.insert( n1, s , n2, len ) 从str[n1]起 插入从s[n2]起的len个字符 3.覆盖一部分字符串 str.replace(被覆盖的下标，覆盖几个，覆盖来源的字符串，覆盖来源的字符串下标，选取几个)","categories":[],"tags":[]},{"title":"辗转相除法","slug":"辗转相除法","date":"2020-11-05T15:55:05.759Z","updated":"2020-11-07T02:53:10.803Z","comments":true,"path":"2020/11/05/辗转相除法/","link":"","permalink":"http://nooballen.top/2020/11/05/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/","excerpt":"","text":"求两个数的最大公约数的常用方法为辗转相除法，通常用于分数约分 以除数和余数反复做除法运算 int GCD(int a,int b) //求最大公约数{ int num1=max(a,b),num2=min(a,b); int temp=num1%num2; //记录余数 while(temp!=0) { num1=num2; num2=temp; temp=num1%num2; } cout&lt;&lt;num2&lt;&lt;” “; return num2;}","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://nooballen.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"洛谷题解","slug":"洛谷题解","date":"2020-09-20T13:30:55.775Z","updated":"2020-11-07T02:53:35.961Z","comments":true,"path":"2020/09/20/洛谷题解/","link":"","permalink":"http://nooballen.top/2020/09/20/%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3/","excerpt":"","text":"Hello","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"CS","slug":"CS","permalink":"http://nooballen.top/tags/CS/"},{"name":"算法","slug":"算法","permalink":"http://nooballen.top/tags/%E7%AE%97%E6%B3%95/"}]}